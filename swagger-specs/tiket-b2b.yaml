openapi: 3.0.4
info:
  title: Tiket B2B Flight Integration
  # description: |-
  #   This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
  #   Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
  #   You can now help us improve the API whether it's by making changes to the definition itself or to the code.
  #   That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

  #   Some useful links:
  #   - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
  #   - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  # termsOfService: https://swagger.io/terms/
  # contact:
  #   email: apiteam@swagger.io
  # license:
  #   name: Apache 2.0
  #   url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
# externalDocs:
#   description: Find out more about Swagger
#   url: https://swagger.io
servers:
  - url: https://stg-k-api.indodanafinance.com/chermes
tags:
  # - name: user
  #   description: Operations about user
  - name: flight
  - name: mobile
  - name: webview
paths:
  /digital-products/v1/flights:
    get:
      tags:
        - webview
        - flight
      description: 'Search'
      parameters: []
      responses:
        '200':
          description: OK
  /digital-products/v1/flights/passenger-forms:
    get:
      tags:
        - webview
        - flight
      description: 'Get passenger form'
      parameters: []
      responses:
        '200':
          description: OK
  /digital-products/v1/flights/ancillaries:
    get:
      tags:
        - webview
        - flight
      description: 'Get ancillaries'
      parameters: []
      responses:
        '200':
          description: OK
  /digital-products/v1/passengers:
    get:
      tags:
        - webview
        - flight
      description: Get saved passengers
      parameters: []
      responses:
        '200':
          description: OK
  /digital-products/v1/flights/orders:
    post:
      tags:
        - webview
        - flight
      description: Create order
      parameters: []
      responses:
        '200':
          description: OK
    get:
      tags:
        - webview
        - mobile
        - flight
      description: Get orders
      parameters: []
      responses:
        '200':
          description: OK
  /digital-products/v1/flights/orders/{orderId}:
    get:
      tags:
        - webview
        - mobile
        - flight
      description: Get order details by ID
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
          required: true
          description: Order ID
      responses:
        '200':
          description: OK
  /digital-products/v1/flights/orders/{orderId}/refund-reasons:
    get:
      tags:
        - mobile
        - flight
      description: Get refund reasons
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
          required: true
          description: Order ID
      responses:
        '200':
          description: OK
  /digital-products/v1/flights/orders/{orderId}/refund-requests:
    post:
      tags:
        - mobile
        - flight
      description: Submit refund request
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
          required: true
          description: Order ID
      responses:
        '200':
          description: OK
  /borrower/v12/purchase-transactions/{purchaseTransactionId}/generate-installment-simulation-tables:
    get:
      tags:
        - mobile
        - flight
      description: Get simulation table
      parameters:
        - in: path
          name: purchaseTransactionId
          schema:
            type: string
          required: true
          description: Purchase Transaction ID
      responses:
        '200':
          description: OK
  /mobile/v5/loan-contract-detail/{loanContractId}:
    get:
      tags:
        - mobile
      description: Get loan contract details
      parameters:
        - in: path
          name: loanContractId
          schema:
            type: string
          required: true
          description: Loan Contract ID
      responses:
        '200':
          description: OK
  # /user/{username}:
  #   get:
  #     tags:
  #       - user
  #     summary: Get user by user name.
  #     description: Get user detail based on username.
  #     operationId: getUserByName
  #     parameters:
  #       - name: username
  #         in: path
  #         description: The name that needs to be fetched. Use user1 for testing
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #       '400':
  #         description: Invalid username supplied
  #       '404':
  #         description: User not found
  #       default:
  #         description: Unexpected error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
  #   put:
  #     tags:
  #       - user
  #     summary: Update user resource.
  #     description: This can only be done by the logged in user.
  #     operationId: updateUser
  #     parameters:
  #       - name: username
  #         in: path
  #         description: name that need to be deleted
  #         required: true
  #         schema:
  #           type: string
  #     requestBody:
  #       description: Update an existent user in the store
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #         application/xml:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #         application/x-www-form-urlencoded:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #     responses:
  #       '200':
  #         description: successful operation
  #       '400':
  #         description: bad request
  #       '404':
  #         description: user not found
  #       default:
  #         description: Unexpected error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
  #   delete:
  #     tags:
  #       - user
  #     summary: Delete user resource.
  #     description: This can only be done by the logged in user.
  #     operationId: deleteUser
  #     parameters:
  #       - name: username
  #         in: path
  #         description: The name that needs to be deleted
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: User deleted
  #       '400':
  #         description: Invalid username supplied
  #       '404':
  #         description: User not found
  #       default:
  #         description: Unexpected error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            "write:pets": modify pets in your account
            "read:pets": read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header